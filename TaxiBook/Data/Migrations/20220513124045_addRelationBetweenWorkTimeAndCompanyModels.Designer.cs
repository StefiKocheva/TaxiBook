// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxiBook.Data;

namespace TaxiBook.Data.Migrations
{
    [DbContext(typeof(TaxiBookDbContext))]
    [Migration("20220513124045_addRelationBetweenWorkTimeAndCompanyModels")]
    partial class addRelationBetweenWorkTimeAndCompanyModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Absence", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Till")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EndLocationCoordinates")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StartLocationCoordinates")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeRole")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxiId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TaxiId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DailyPricePerCall")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DailyPricePerMinuteStay")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal?>("InitialDailyFee")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InitialNightFee")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LicenseUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("NightPricePerCall")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NightPricePerMinuteStay")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OneКilometerМileageDailyPrice")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OneКilometerМileageNightPrice")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Favorite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("OneКilometerМileageDailyPrice")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OneКilometerМileageNightPrice")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Feedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AcceptedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdditionalRequirements")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ChosenTaxiDriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CountOfPassengers")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentLocationDetails")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CurrentLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EndLocationDetails")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("EndLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.Property<string>("ProcessedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefusedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaxiId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnacceptedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnprocessedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedById");

                    b.HasIndex("ChosenTaxiDriverId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrentLocationId");

                    b.HasIndex("EndLocationId");

                    b.HasIndex("ProcessedById");

                    b.HasIndex("RefusedById");

                    b.HasIndex("TaxiId");

                    b.HasIndex("UnacceptedById");

                    b.HasIndex("UnprocessedById");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FinishAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Taxi", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsBusy")
                        .HasColumnType("bit");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DriverId");

                    b.HasIndex("LocationId");

                    b.ToTable("Taxies");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.WorkTime", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Companyid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Till")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Companyid");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkTimes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Absence", b =>
                {
                    b.HasOne("TaxiBook.Data.Models.Company", "Company")
                        .WithMany("Absences")
                        .HasForeignKey("CompanyId");

                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "Employee")
                        .WithMany("Absences")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Address", b =>
                {
                    b.HasOne("TaxiBook.Data.Models.Company", "Company")
                        .WithOne("Location")
                        .HasForeignKey("TaxiBook.Data.Models.Address", "CompanyId");

                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "User")
                        .WithOne("Address")
                        .HasForeignKey("TaxiBook.Data.Models.Address", "UserId");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("TaxiBook.Data.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");

                    b.HasOne("TaxiBook.Data.Models.Taxi", null)
                        .WithMany("Users")
                        .HasForeignKey("TaxiId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Favorite", b =>
                {
                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "Client")
                        .WithMany("Favorites")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Feedback", b =>
                {
                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "Client")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ClientId");

                    b.HasOne("TaxiBook.Data.Models.Company", "Company")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Client");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Order", b =>
                {
                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "AcceptedBy")
                        .WithMany("AcceptedOrders")
                        .HasForeignKey("AcceptedById");

                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "ChosenTaxiDriver")
                        .WithMany("ChosenTaxiDriverOrders")
                        .HasForeignKey("ChosenTaxiDriverId");

                    b.HasOne("TaxiBook.Data.Models.Company", "Company")
                        .WithMany("Orders")
                        .HasForeignKey("CompanyId");

                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany("CreatedOrders")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TaxiBook.Data.Models.Address", "CurrentLocation")
                        .WithMany("CurrentLocations")
                        .HasForeignKey("CurrentLocationId");

                    b.HasOne("TaxiBook.Data.Models.Address", "EndLocation")
                        .WithMany("EndLocations")
                        .HasForeignKey("EndLocationId");

                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "ProcessedBy")
                        .WithMany("ProcessedOrders")
                        .HasForeignKey("ProcessedById");

                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "RefusedBy")
                        .WithMany("RefusedOrders")
                        .HasForeignKey("RefusedById");

                    b.HasOne("TaxiBook.Data.Models.Taxi", "Taxi")
                        .WithMany("Orders")
                        .HasForeignKey("TaxiId");

                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "UnacceptedBy")
                        .WithMany("UnacceptedOrders")
                        .HasForeignKey("UnacceptedById");

                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "UnprocessedBy")
                        .WithMany("UnprocessedOrders")
                        .HasForeignKey("UnprocessedById");

                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("AcceptedBy");

                    b.Navigation("ChosenTaxiDriver");

                    b.Navigation("Company");

                    b.Navigation("CreatedBy");

                    b.Navigation("CurrentLocation");

                    b.Navigation("EndLocation");

                    b.Navigation("ProcessedBy");

                    b.Navigation("RefusedBy");

                    b.Navigation("Taxi");

                    b.Navigation("UnacceptedBy");

                    b.Navigation("UnprocessedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Schedule", b =>
                {
                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "Employee")
                        .WithOne("Schedule")
                        .HasForeignKey("TaxiBook.Data.Models.Schedule", "EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Taxi", b =>
                {
                    b.HasOne("TaxiBook.Data.Models.Company", "Company")
                        .WithMany("Taxies")
                        .HasForeignKey("CompanyId");

                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "Driver")
                        .WithMany("Taxies")
                        .HasForeignKey("DriverId");

                    b.HasOne("TaxiBook.Data.Models.Address", "Location")
                        .WithMany("Taxies")
                        .HasForeignKey("LocationId");

                    b.Navigation("Company");

                    b.Navigation("Driver");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.WorkTime", b =>
                {
                    b.HasOne("TaxiBook.Data.Models.Company", "Company")
                        .WithMany("WorkTimes")
                        .HasForeignKey("Companyid");

                    b.HasOne("TaxiBook.Data.Models.ApplicationUser", "Employee")
                        .WithMany("WorkTimes")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Address", b =>
                {
                    b.Navigation("CurrentLocations");

                    b.Navigation("EndLocations");

                    b.Navigation("Taxies");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("AcceptedOrders");

                    b.Navigation("Address");

                    b.Navigation("ChosenTaxiDriverOrders");

                    b.Navigation("CreatedOrders");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");

                    b.Navigation("ProcessedOrders");

                    b.Navigation("RefusedOrders");

                    b.Navigation("Schedule");

                    b.Navigation("Taxies");

                    b.Navigation("UnacceptedOrders");

                    b.Navigation("UnprocessedOrders");

                    b.Navigation("WorkTimes");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Company", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("Employees");

                    b.Navigation("Feedbacks");

                    b.Navigation("Location");

                    b.Navigation("Orders");

                    b.Navigation("Taxies");

                    b.Navigation("WorkTimes");
                });

            modelBuilder.Entity("TaxiBook.Data.Models.Taxi", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
